# Pillars of Object Oriented Programming:
1. Inheritance.
2. Encapsulation.
3. Abstraction.
4. Polymorphism.
  
# Inhheritence: 
Inheritance allows a new class to inherit properties and behaviors from an existing class. 

# Encapsulation:
Encapsulation is a fundamental principle of object-oriented programming (OOP) that allows you to bundle data and methods that operate on that data within a single unit, called a class. Encapsulation in C# is achieved through the use of access modifiers and properties.

Access Modifiers: Access modifiers control the visibility and accessibility of class members. The commonly used access modifiers are -

public: The member is accessible from any other code in the same assembly or from derived classes.

private: The member is accessible only from within the same class.

protected: The member is accessible within the same class and by derived classes.

internal: The member is accessible only within the same assembly.

protected internal: The member is accessible within the same assembly or by derived classes.


# Polymorphism:
Polymorphism allows you to invoke derived class methods through a base class reference during runtime.
In the base class the method is declared as virtual, and in the derived class we override the same method. The virtual keyword indicates, the method can be overridden in any derived class.
  
# Method Overriding:
In method overriding a base class reference variable pointing to a child class object,
will invoke the overridden method in the child class. It is also called Polymorphism.

# Method Hidding:
In method overriding a base class reference variable pointing to a child class object, will invoke the hidden  method in the base class.
  
# Method Overloadnig:
Method overloading allows a class to have multiple methods with the same name, but differnet types and numbers of paramenter. It is not possiable to overload a function based on the return type of a method.	